#@ Port : {"type": "out", "name": "Result", "label" : "Training Report"}

import numpy as np
import os

from sklearn.preprocessing import MinMaxScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix, classification_report

def __main__(this):

    # Load normal and attack data. We want to classify between these two types

    normal_data = np.array([0.011768250493890258, 0.011765859167959518, 0.011786020575205659, 0.011823439911012729, 0.0118608592468198, 0.011898278582626617, 0.011935697918433689, 0.01197311725424076, 0.012010536590047577, 0.012047955925854649, 0.012087390831671343, 0.012155119567615742, 0.0122228483035606, 0.012290577039505458, 0.012358305775449857, 0.012426034511394714, 0.012493763247339572, 0.012561491983283971, 0.01262922071922883, 0.012698601010859439, 0.012769245115164451, 0.012839889219469944, 0.012910533323775435, 0.01298117742808045, 0.01305182153238594, 0.013122465636691432, 0.013193109740996446])
    attack_data = np.array([0.011768250493890258, 0.011765859167959518, 0.011786020575205659, 0.011823439911012729, 1.0118608592468198, 0.011898278582626617, 0.011935697918433689, 0.01197311725424076, 0.012010536590047577, 0.012047955925854649, 0.012087390831671343, 0.012155119567615742, 0.0122228483035606, 0.012290577039505458, 0.012358305775449857, 0.012426034511394714, 0.012493763247339572, 0.012561491983283971, 0.01262922071922883, 0.012698601010859439, 0.012769245115164451, 0.012839889219469944, 1.012910533323775435, 0.01298117742808045, 0.01305182153238594, 0.013122465636691432, 0.013193109740996446])
       
    # Create labels (0 = Normal, 1 = Attack)
    y_normal = np.zeros(1)
    y_attack = np.ones(1)

    # Combine normal and attack data
    X = np.vstack([normal_data, attack_data])
    y = np.hstack([y_normal, y_attack])

    # Train Random Forest Classifier
    clf = RandomForestClassifier(n_estimators=100, random_state=42)
    clf.fit(X, y)
    y_pred = clf.predict(X)

    # Evaluate Model
    report =("Random Forest Classification Results:\n")
    report += str(confusion_matrix(y, y_pred)) + "\n"
    report += str(classification_report(y, y_pred))
    OpenTwin.SetPortData("Result",report)    