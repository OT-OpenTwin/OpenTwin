//! @file KeyMap.h
//! 
//! @author Alexander Kuester (alexk95)
//! @date August 2023
// ###########################################################################################################################################################################################################################################################################################################################

#pragma once

// OpenTwin header
#include "OpenTwinCore/CoreAPIExport.h"

// std header
#include <map>
#include <string>
#include <mutex>

#pragma warning(disable:4251)

namespace ot {

	class OT_CORE_API_EXPORT KeyMap {
	public:
		KeyMap() {};
		KeyMap(const KeyMap& _other) : m_data(_other.m_data) {};
		virtual ~KeyMap() {};

		KeyMap& operator = (const KeyMap& _other);

		bool contains(const std::string& _key);
		void set(const std::string& _key, const std::string& _value);
		std::string get(const std::string& _key);

	private:
		std::map<std::string, std::string> m_data;
		std::mutex m_mutex;
	};

	// ###########################################################################################################################################################################################################################################################################################################################

	// ###########################################################################################################################################################################################################################################################################################################################

	// ###########################################################################################################################################################################################################################################################################################################################

	class OT_CORE_API_EXPORT GlobalKeyMapRegistrar {
	public:
		GlobalKeyMapRegistrar(const std::string& _key, const std::string& _value);
		~GlobalKeyMapRegistrar() {};

	private:
		GlobalKeyMapRegistrar() = delete;
		GlobalKeyMapRegistrar(const GlobalKeyMapRegistrar&) = delete;
		GlobalKeyMapRegistrar& operator= (const GlobalKeyMapRegistrar&) = delete;
	};

	// ###########################################################################################################################################################################################################################################################################################################################

	// ###########################################################################################################################################################################################################################################################################################################################

	// ###########################################################################################################################################################################################################################################################################################################################

	class OT_CORE_API_EXPORT GlobalKeyMap : public ot::KeyMap {
	public:
		static GlobalKeyMap& instance(void);
	private:
		GlobalKeyMap() {};
		virtual ~GlobalKeyMap() {};
	};

}